
%{
#include "calc.tab.hpp"
#include <cstdlib> // for atoi
#include <string.h>
%}

/* This tells flex to quit when it reaches EOF */
%option noyywrap

/* VARIABLES  */
FLOAT [0-9]*\.[0-9]+f?|[0-9]+f
INT [0-9]+
BOOLEAN true|false
STRING ["][^"\n]*["]
/* BASIC KEYWORDS */
COMMENT \/\/
/* ASSIGN OPERATORS*/
ASSIGN =
ADD_ASSIGN \+=
DIV_ASSIGN \/=
MOD_ASSIGN %=
MUL_ASSIGN \*=
SUB_ASSIGN \-=
SEMICOLON ;
VARIABLE [a-zA-Z][a-zA-Z0-9_]*
/* LOGICAL OPERATORS */
AND &&
OR \|\|
GTH >
LTH <
GTHEQ >=
LTHEQ <=
EQUALS ==
NEQUALS !=
/* ARITHMETIC OPERATORS */
SUM \+
SUB -
MUL \*
DIV \/
REM %
/* PARANTHESES */
SOP \(
EOP \)
SOB \[
EOB \]
SOCB \{
EOCB \}
/*KEYWORDS*/
KEYWORD kor|func|return|if|else|for|struct|range
IDEN float|int|string|bool
/*IGNORED*/
IGNORED [ \n\r]+
%%
{SEMICOLON} { return STOP; }
{FLOAT} {yylval.fval = atof(yytext); return FLOAT;  }
{INT} { yylval.ival = atoi(yytext); return INT; }
{BOOLEAN} { if(strcmp(yytext,"true")){ yylval.ival = 1 ;} else { yylval.ival = 0; }   return BOOL;}
{IDEN} { yylval.id = (char *)malloc(yyleng);sprintf(yylval.id,"%s",yytext); return IDEN; }
"kor" {return KOR;}
"func" {return FUNC;}
"return" {return RETURN;}
"if" {return IF;}
"else" {return ELSE;}
"for" {return FOR;}
"struct" {return STRUCT;}
"range" {return RANGE;} 
{AND} {return AND;}
{OR} {return OR;}
{GTH} {return GTH;}
{LTH} {return LTH;}
{GTHEQ} {return GTHEQ;}
{LTHEQ} {return LTHEQ;}
{EQUALS} {return EQ;}
{NEQUALS} {return NEQ;}
{SUM} { yylval.sym = yytext[0]; return OPA; }
{SUB} { yylval.sym = yytext[0]; return OPA; }
{MUL} { yylval.sym = yytext[0]; return OPM; }
{DIV} { yylval.sym = yytext[0]; return OPM; }
{REM} {printf("REMAINDER");}
{SOP} {return SOP;}
{EOP} {return EOP;}
{SOB} {return SOB;}
{EOB} {return EOB;}
{SOCB} {return SOCB;}
{EOCB} {return EOCB;}
{COMMENT} 
{ASSIGN} {return ASSGN;}
{ADD_ASSIGN} {return ADD_ASSIGN;}
{SUB_ASSIGN} {return SUB_ASSIGN;}
{DIV_ASSIGN} {return DIV_ASSIGN;}
{MUL_ASSIGN} {return MUL_ASSIGN;}
{MOD_ASSIGN} {return MOD_ASSIGN;}
{VARIABLE}  { yylval.id = (char *)malloc(yyleng);sprintf(yylval.id,"%s",yytext); return VAR;  }
{IGNORED} {}
. { printf("SYNTAX ERROR: %s",yytext); }
%%
