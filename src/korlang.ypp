%code requires {
#include <cstdlib> // for atoi
#include <iostream>
#include <string>
#include <map>
#include "colorout.hpp"
#include "driver.hpp"
#include "tree.hpp"
#define NOTHING		struct value temp;temp.use="none";
#define YYDEBUG 1
TreeNode* getRoot(FILE*);

extern "C++" int yylex();
extern "C++" FILE *yyin;

using namespace std;

//-- Lexer prototype required by bison
int yylex(); 

// Global variables for printing in pretty colors
extern colorout resout;
extern colorout errout;
}

  /* Everything in this block only goes in the bison file. */
%code {

Driver* driver = new Driver();
TreeNode* root = NULL;


// Error function that bison will call
void yyerror(const char *description) { 
  errout << description << endl; 
}

// Global variable to indicate done-ness
bool keepgoing = true;


}

  /* Tell bison to give descriptive error messages. */
%error-verbose

  /* These are the different "semantic values" that a token can have. */
%union {
  int ival;
  float fval; 
  char sym;
  char* id;
  TreeNode *tval;
};

  /* These are the basic token types, organized by what kind
   * of semantic value they can have. */
%token <ival> INT
%token <fval> FLOAT 
%token <id> STRING
%token <id> VAR
%token <id> IDEN
%token <ival> BOOL
%token <sym> OPA OPM 
%token LP RP STOP 
%token COMMA COLON DOT
%token ASSGN MUL_ASSIGN MOD_ASSIGN DIV_ASSIGN SUB_ASSIGN ADD_ASSIGN POST_INCRE 
%token AND OR GTH LTH GTHEQ LTHEQ EQ NEQ
%token SOP EOP SOB EOB SOCB EOCB
%token RETURN_T IF FOR ELSE WHILE FUNC KOR STRUCT RANGE BREAK_T  TRY CATCH  EXTRACT IMPORT_K KORCON_T

  /* These are the non-terminal names that have values. */
%type <tval> ar_exp arr_call exp constant stmts factor assignment_operator key_value_pairs key_value_pair stmt term logical_operators logical_or_operations logical_operations function_call params variable_list if_stmt loop_stmt func_stmt inc_dec_operations anonymous_function_declaration dot_chain
%start program

//-- GRAMMAR RULES ---------------------------------------
%%
  /* Note: YYACCEPT is a macro that tells bison to stop parsing. */

program : S {}

S: stmts 
  {NOTHING
  root = new TreeNode(temp,OPERATIONS(ROOT),$1,NULL,NULL,NULL);
  YYACCEPT;
}
|       { keepgoing = false; }


stmts: stmt
  {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(STMT_LIST),NULL,$1,NULL,NULL);
  }
|stmts stmt 
{NOTHING
$$ = new TreeNode(temp,OPERATIONS(STMT_LIST),$1,$2,NULL,NULL);
}


stmt: exp STOP 
  {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(EXPRESSION),$1,NULL,NULL,NULL);
  }
| IDEN VAR ASSGN exp STOP {
  struct value temp;
  temp.use = "identifier";
  struct value temp2;
  temp2.v.s = $2;
  temp2.use = "string";
  TreeNode* second = new TreeNode(temp2,OPERATIONS(VARIABLE));
  $$ = new TreeNode(temp,OPERATIONS(DECLARATION),NULL,second,$4,NULL);
}
| arr_call assignment_operator exp STOP{
  struct value temp;
  temp.use =  "identifier";
  $$ = new TreeNode(temp,OPERATIONS(ARR_ASSIGNMENT),$1,$2,$3,NULL);
}

|IDEN VAR ASSGN SOB params EOB STOP {
  struct value temp;
  temp.v.s = $2;
  temp.use ="identifier";
  $$ = new TreeNode(temp,OPERATIONS(ARRAY_DEF),$5,NULL,NULL,NULL);
 }

|IDEN VAR ASSGN SOCB  key_value_pairs EOCB STOP {
  struct value temp;
  temp.v.s = $2;
  temp.use ="identifier";
  $$ = new TreeNode(temp,OPERATIONS(OBJECT_DEF),$5,NULL,NULL,NULL);
 }

| VAR assignment_operator exp STOP{
  struct value temp;
  temp.use =  "identifier";
  temp.v.s = $1;
$$ = new TreeNode(temp,OPERATIONS(ASSIGNMENT),NULL,$2,$3,NULL);}

| IMPORT_K STRING STOP{
  struct value temp;
  temp.use = "import";
  temp.v.s = $2;
  $$ = new TreeNode(temp,OPERATIONS(IMPORT_STMT));
}

|logical_operations STOP{NOTHING
$$ = new TreeNode(temp,OPERATIONS(AND_LOGIC),$1,NULL,NULL,NULL);
}
| TRY SOCB stmts EOCB CATCH SOCB stmts EOCB {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(TRY_CATCH),$3,$7,NULL,NULL);
}
|func_stmt { $$ = $1;}
|if_stmt  { $$ = $1;}
|loop_stmt { $$ = $1;}
| KOR SOCB stmts EOCB {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(KOR_STMT),$3,NULL,NULL,NULL);
}
| EXTRACT VAR STOP {
  struct value temp;
  temp.sval = $2;
  $$ = new TreeNode(temp,OPERATIONS(EXTRACT_STMT));
}
|KORCON_T function_call STOP{NOTHING
$$= new TreeNode(temp,OPERATIONS(KORCON),$2,NULL,NULL,NULL);
}


key_value_pair : VAR COLON exp {
  struct value temp;
  temp.v.s = $1;
  temp.use= "identifier";
  $$ = new TreeNode(temp,OPERATIONS(PAIR),$3,NULL,NULL,NULL);
} 

key_value_pairs : key_value_pair {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(PAIRS),NULL,$1,NULL,NULL);
  }
| key_value_pairs COMMA key_value_pair { NOTHING
  $$ = new TreeNode(temp,OPERATIONS(PAIRS),$1,$3,NULL,NULL);
}
| {NOTHING $$ = new TreeNode(temp,OPERATIONS(PAIRS));  }

//FUNC STMT
func_stmt:
  FUNC VAR SOP variable_list EOP SOCB  stmts EOCB {
  struct value temp;
  temp.v.s = $2;
  temp.use = "identifier";
  $$ = new TreeNode(temp,OPERATIONS(FUNCTION_DEC),$4,$7,NULL,NULL);
}
| BREAK_T STOP {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(BREAK));
}
|
RETURN_T STOP {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(RETURN));
}
|
RETURN_T exp STOP {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(RETURN),$2,NULL,NULL,NULL);
}

// FUNCION CALLS
function_call : exp SOP EOP {
  struct value temp;
  $$ = new TreeNode(temp,OPERATIONS(FUNCTION),NULL,$1,NULL,NULL);
}
| exp SOP params EOP {
  struct value temp;
  $$= new TreeNode(temp,OPERATIONS(FUNCTION),$3,$1,NULL,NULL);
}

anonymous_function_declaration : FUNC SOP params EOP SOCB stmts EOCB {NOTHING
  $$= new TreeNode(temp,OPERATIONS(AN_FUNC_DEC),$3,$6,NULL,NULL);
}

// IF STMT
if_stmt:
IF exp SOCB stmts EOCB{NOTHING
$$ = new TreeNode(temp,OPERATIONS(IF_LOGIC),$2,$4,NULL,NULL);
}
|IF exp SOCB stmts EOCB ELSE SOCB stmts EOCB{NOTHING
$$ = new TreeNode(temp,OPERATIONS(IF_ELSE_LOGIC),$2,$4,$8,NULL);
}


// LOOP STMT
loop_stmt:
 FOR SOCB stmts EOCB {
  struct value temp;
  temp.use = "identifier";
  $$ = new TreeNode(temp,OPERATIONS(LOOP),$3,NULL,NULL,NULL);
}
| FOR logical_operations SOCB stmts EOCB {
  struct value temp;
  temp.use = "identifier";
  $$ = new TreeNode(temp,OPERATIONS(LOOP),$2,$4,NULL,NULL);
}
| FOR stmt  logical_operations STOP stmt  SOCB stmts EOCB {
  struct value temp;
  temp.use = "identifier";
  $$ = new TreeNode(temp,OPERATIONS(LOOP),$2,$3,$5,$7);
}


// VARIABLE LIST
variable_list : VAR {NOTHING
  struct value temp1;
  temp1.v.s = $1;
  temp1.use = "identifier";
  auto tn = new TreeNode(temp1,OPERATIONS(VAR_NAME));
  $$ = new TreeNode(temp,OPERATIONS(VAR_LIST),NULL,tn,NULL,NULL); 
}
| variable_list COMMA VAR {NOTHING
struct value temp1;
  temp1.v.s = $3;
  temp1.use = "identifier";
  auto tn = new TreeNode(temp1,OPERATIONS(VAR_NAME));
  $$ = new TreeNode(temp,OPERATIONS(VAR_LIST),$1,tn,NULL,NULL);
}
| {NOTHING $$ = new TreeNode(temp,OPERATIONS(VAR_LIST));}



 

params : exp {NOTHING $$ = new TreeNode(temp,OPERATIONS(PARAMETERS),NULL,$1,NULL,NULL); }
| params COMMA exp { NOTHING 
  $$ = new TreeNode(temp,OPERATIONS(PARAMETERS),$1,$3,NULL,NULL);
  }

exp : ar_exp {$$ = $1;}
|logical_operations  { $$ = $1; }
| anonymous_function_declaration {$$ = $1;}
|dot_chain { $$ =$1;}


ar_exp: ar_exp OPA term      { 
  struct value temp;
  temp.use = "identifier";
  OPERATIONS op = OPERATIONS(SUM);
  if ($2 == '-') op = OPERATIONS(SUB); 

  $$ = new TreeNode(temp,op,$1,$3,NULL,NULL);
 }
| term               { $$ = $1; }

term : term OPM factor {
  struct value temp;
  temp.use = "identifier";
  OPERATIONS op = OPERATIONS(MULTIPLY);
  if ($2 == '/') op = OPERATIONS(DIVIDE);
  if ($2 == '%') op = OPERATIONS(MOD); 
  $$ = new TreeNode(temp,op,$1,$3,NULL,NULL);

}
| factor {$$= $1;}

inc_dec_operations:
  
   VAR POST_INCRE {
    struct value temp;
    temp.v.s = $1;
    $$ = new TreeNode(temp,OPERATIONS(POST_INC),NULL,NULL,NULL,NULL);
  }

factor: constant  {$$ = $1;}
 | SOP ar_exp EOP { $$ = $2;}
 | VAR {
  struct value temp;
  temp.v.s = $1;
  temp.use = "identifier";
  $$ = new TreeNode(temp,OPERATIONS(VARIABLE));
 }
 | function_call  {  $$ = $1;}
 |  arr_call { $$ = $1;}
 |inc_dec_operations {NOTHING
 $$ = new TreeNode(temp,OPERATIONS(INC_DEC),$1,NULL,NULL,NULL);
 }


arr_call :  VAR SOB exp EOB {
   struct value temp;
   temp.v.s = $1;
   temp.use = "identifier";
   $$= new TreeNode(temp,OPERATIONS(ARRAY_ELEM),$3,NULL,NULL,NULL);
 }


constant : INT            { 
  struct value temp;
  temp.v.i = $1;
  temp.use = "integer";
  $$ = new TreeNode(temp,OPERATIONS(CONSTANT));
 }
 |STRING{
   struct value temp;
   temp.v.s = $1;
   temp.use = "string";
   $$ = new TreeNode(temp,OPERATIONS(CONSTANT));
 }
 |FLOAT{
   struct value temp;
   temp.v.f = $1;
   temp.use = "float";
   $$ = new TreeNode(temp,OPERATIONS(CONSTANT));
 }


// LOGICAL OPERATORS
 logical_operators:
 exp LTH exp {NOTHING
  $$ = new TreeNode(temp,OPERATIONS(LTH_LOGIC),$1,$3,NULL,NULL);
 }
 |exp GTH exp {NOTHING
 $$ = new TreeNode(temp,OPERATIONS(GTH_LOGIC),$1,$3,NULL,NULL);
 }
 |exp LTHEQ exp {NOTHING
 $$ = new TreeNode(temp,OPERATIONS(LTHEQ_LOGIC),$1,$3,NULL,NULL);
 }
 |exp GTHEQ exp {NOTHING
 $$ = new TreeNode(temp,OPERATIONS(GTHEQ_LOGIC),$1,$3,NULL,NULL);
 }
 |exp EQ exp{NOTHING
 $$ = new TreeNode(temp,OPERATIONS(EQ_LOGIC),$1,$3,NULL,NULL);}
 |exp NEQ exp{NOTHING
 $$ = new TreeNode(temp,OPERATIONS(NEQ_LOGIC),$1,$3,NULL,NULL);}
 |BOOL{
   struct value temp;
   temp.use = "boolean";
   temp.v.i = $1;
   $$ = new TreeNode(temp,OPERATIONS(CONSTANT));
 }
 | ar_exp  { $$ = $1;}
 |SOP logical_operations EOP {$$ = $2; }


// LOGICAL OPERATIONS
 logical_operations:
 logical_or_operations{NOTHING
 $$ = new TreeNode(temp,OPERATIONS(AND_LOGIC),$1,NULL,NULL,NULL);
 }
 | logical_operations AND logical_or_operations{NOTHING
 $$ = new TreeNode(temp,OPERATIONS(AND_LOGIC),$1,$3,NULL,NULL);
 }

 logical_or_operations:
 logical_or_operations  OR logical_operations{NOTHING
 $$ = new TreeNode(temp,OPERATIONS(OR_LOGIC),$1,$3,NULL,NULL);
 }
 |logical_operators{NOTHING
 $$ = new TreeNode(temp,OPERATIONS(LOGIC),$1,NULL,NULL,NULL);
 }

// ASSIGNMENT OPERATORS
 assignment_operator :
  ASSGN
	{
		struct value temp;
		temp.v.s = "=";
		temp.use = "string";
		$$ = new TreeNode(temp,OPERATIONS(ASSIGNMENT_OPERATOR));
	}
	| MUL_ASSIGN
	{
		struct value temp;
		temp.v.s = "*=";
		temp.use = "string";
		$$ = new TreeNode(temp,OPERATIONS(ASSIGNMENT_OPERATOR));;
	}
	| DIV_ASSIGN
	{
		struct value temp;
		temp.v.s = "/=";
		temp.use = "string";
		$$ = new TreeNode(temp,OPERATIONS(ASSIGNMENT_OPERATOR));;
	}
	| MOD_ASSIGN
	{
		struct value temp;
		temp.v.s = "%=";
		temp.use = "string";
		$$ = new TreeNode(temp,OPERATIONS(ASSIGNMENT_OPERATOR));;
	}
	| ADD_ASSIGN
	{
		struct value temp;
		temp.v.s = "+=";
		temp.use = "string";
		$$ = new TreeNode(temp,OPERATIONS(ASSIGNMENT_OPERATOR));;
	}
	| SUB_ASSIGN
	{
		struct value temp;
		temp.v.s = "-=";
		temp.use = "string";
		$$ = new TreeNode(temp,OPERATIONS(ASSIGNMENT_OPERATOR));;
	}
	;  
  
 dot_chain : VAR {
  struct value temp;
  temp.use="string";
  temp.sval = $1;
  TreeNode *varTree = new TreeNode(temp,OPERATIONS(CONSTANT));
  $$ = new TreeNode(temp,OPERATIONS(DOT_CALL),NULL,varTree,NULL,NULL);
}
|dot_chain DOT VAR{
  struct value temp;
  temp.use = "string";
  temp.sval = $3;
  TreeNode *varTree = new TreeNode(temp,OPERATIONS(CONSTANT));
  $$= new TreeNode(temp,OPERATIONS(DOT_CALL),$1,varTree,NULL,NULL);
}


%%
// These are the colored output streams to make things all pretty.
colorout resout(1, 'u');
colorout errout(2, 'r');

//-- FUNCTION DEFINITIONS ---------------------------------
TreeNode* getRoot(FILE* myfile)
{
  // make sure it's valid:
  if (!myfile) {
    return NULL;
  }
  yydebug = 0;
  // set lex to read from it instead of defaulting to STDIN:
  yyin = myfile;
  // This checks whether the output is a terminal.
  bool tty = isatty(0) && isatty(2);
  keepgoing = true;
  while (keepgoing) {
    if (tty) cerr  << flush;
    yyparse();
  }
  TreeNode *res = root;
  root = NULL;
  yydebug = 1;
  return res;

}

void printbin(int n) {
  if (n < 0) { 
    resout << '-'; 
    n = -n; 
  }
  int bit = 1;
  while (bit > 0 && bit*2 <= n) bit *= 2;
  while (bit > 0) {
    if (bit <= n) {
      n -= bit;
      resout << '1';
    }
    else resout << '0';
    bit /= 2;
  }
  return;
}